#!/usr/bin/perl

# Project Euler -- Problem 12

# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
# 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five
# divisors.

# What is the value of the first triangle number to have over five
# hundred divisors?

use 5.10.0;
use strict;
use warnings;

use Math::Big::Factors qw< factors_wheel >;
use Math::Subsets::List;
use List::AllUtils qw< reduce uniq >;

sub product {
    no strict 'vars'; no warnings;
    return reduce { $a * $b } @_;
}

sub factor_counts {
    my $n = shift;
    my %factor_counts;
    $factor_counts{$_}++ for factors_wheel($n);
    return \%factor_counts;
}

sub num_divisors {
    my $factor_counts = shift;

    return product( map {$_+1} values %$factor_counts );
}

sub divisors {
    my $n = shift;
    my @divisors;
    subsets { push @divisors, product(@_) if @_ } factors_wheel($n);
    @divisors = (1, sort {$a <=> $b} uniq @divisors);
    return \@divisors;
}

my $limit = shift || 10;
my $i = shift || 1;
my $tn = $i * ($i + 1) / 2;
while (1) {
    # my $divisors = divisors($tn);
    # my $num_divisors = scalar @$divisors;
    # say "[$i] $tn\t=> $num_divisors", $i < 50 ? " [@$divisors]" : "";
    my $num_divisors = num_divisors( factor_counts( $tn ) );
    say STDERR "[$i] $tn\t=> $num_divisors";
    if ($num_divisors >= $limit) {
        say "==== $tn ====";
        # say "[@$divisors]";
        last;
    }
    $tn += ++$i;
}
